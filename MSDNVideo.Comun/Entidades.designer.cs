#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MSDNVideo.Comun
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Runtime.Serialization;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="MSDNVIDEOBD")]
	public partial class EntidadesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertActor(Actor instance);
    partial void UpdateActor(Actor instance);
    partial void DeleteActor(Actor instance);
    partial void InsertActoresPelicula(ActoresPelicula instance);
    partial void UpdateActoresPelicula(ActoresPelicula instance);
    partial void DeleteActoresPelicula(ActoresPelicula instance);
    partial void InsertAlquiler(Alquiler instance);
    partial void UpdateAlquiler(Alquiler instance);
    partial void DeleteAlquiler(Alquiler instance);
    partial void InsertNotificacion(Notificacion instance);
    partial void UpdateNotificacion(Notificacion instance);
    partial void DeleteNotificacion(Notificacion instance);
    partial void InsertPelicula(Pelicula instance);
    partial void UpdatePelicula(Pelicula instance);
    partial void DeletePelicula(Pelicula instance);
    partial void InsertUsuario(Usuario instance);
    partial void UpdateUsuario(Usuario instance);
    partial void DeleteUsuario(Usuario instance);
    partial void InsertHistorico(Historico instance);
    partial void UpdateHistorico(Historico instance);
    partial void DeleteHistorico(Historico instance);
    partial void InsertPuntuacion(Puntuacion instance);
    partial void UpdatePuntuacion(Puntuacion instance);
    partial void DeletePuntuacion(Puntuacion instance);
    #endregion
		
		public EntidadesDataContext() : 
				base(global::MSDNVideo.Comun.Properties.Settings.Default.MSDNVideoConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EntidadesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EntidadesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EntidadesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EntidadesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Actor> Actors
		{
			get
			{
				return this.GetTable<Actor>();
			}
		}
		
		public System.Data.Linq.Table<ActoresPelicula> ActoresPeliculas
		{
			get
			{
				return this.GetTable<ActoresPelicula>();
			}
		}
		
		public System.Data.Linq.Table<Alquiler> Alquilers
		{
			get
			{
				return this.GetTable<Alquiler>();
			}
		}
		
		public System.Data.Linq.Table<Notificacion> Notificacions
		{
			get
			{
				return this.GetTable<Notificacion>();
			}
		}
		
		public System.Data.Linq.Table<Pelicula> Peliculas
		{
			get
			{
				return this.GetTable<Pelicula>();
			}
		}
		
		public System.Data.Linq.Table<Usuario> Usuarios
		{
			get
			{
				return this.GetTable<Usuario>();
			}
		}
		
		public System.Data.Linq.Table<Historico> Historicos
		{
			get
			{
				return this.GetTable<Historico>();
			}
		}
		
		public System.Data.Linq.Table<Puntuacion> Puntuacions
		{
			get
			{
				return this.GetTable<Puntuacion>();
			}
		}
	}
	
	[Table(Name="dbo.Actores")]
	[DataContract()]
	public partial class Actor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActorID;
		
		private string _Nombre;
		
		private string _UrlPersonal;
		
		private EntitySet<ActoresPelicula> _ActoresPeliculas;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActorIDChanging(int value);
    partial void OnActorIDChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnUrlPersonalChanging(string value);
    partial void OnUrlPersonalChanged();
    #endregion
		
		public Actor()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ActorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ActorID
		{
			get
			{
				return this._ActorID;
			}
			set
			{
				if ((this._ActorID != value))
				{
					this.OnActorIDChanging(value);
					this.SendPropertyChanging();
					this._ActorID = value;
					this.SendPropertyChanged("ActorID");
					this.OnActorIDChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Column(Storage="_UrlPersonal", DbType="NVarChar(150)")]
		[DataMember(Order=3)]
		public string UrlPersonal
		{
			get
			{
				return this._UrlPersonal;
			}
			set
			{
				if ((this._UrlPersonal != value))
				{
					this.OnUrlPersonalChanging(value);
					this.SendPropertyChanging();
					this._UrlPersonal = value;
					this.SendPropertyChanged("UrlPersonal");
					this.OnUrlPersonalChanged();
				}
			}
		}
		
		[Association(Name="Actor_ActoresPelicula", Storage="_ActoresPeliculas", OtherKey="ActorID")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<ActoresPelicula> ActoresPeliculas
		{
			get
			{
				if ((this.serializing 
							&& (this._ActoresPeliculas.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ActoresPeliculas;
			}
			set
			{
				this._ActoresPeliculas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActoresPeliculas(ActoresPelicula entity)
		{
			this.SendPropertyChanging();
			entity.Actor = this;
		}
		
		private void detach_ActoresPeliculas(ActoresPelicula entity)
		{
			this.SendPropertyChanging();
			entity.Actor = null;
		}
		
		private void Initialize()
		{
			this._ActoresPeliculas = new EntitySet<ActoresPelicula>(new Action<ActoresPelicula>(this.attach_ActoresPeliculas), new Action<ActoresPelicula>(this.detach_ActoresPeliculas));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.ActoresPeliculas")]
	[DataContract()]
	public partial class ActoresPelicula : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActorPeliculaID;
		
		private int _PeliculaID;
		
		private int _ActorID;
		
		private string _Papel;
		
		private EntityRef<Actor> _Actor;
		
		private EntityRef<Pelicula> _Pelicula;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActorPeliculaIDChanging(int value);
    partial void OnActorPeliculaIDChanged();
    partial void OnPeliculaIDChanging(int value);
    partial void OnPeliculaIDChanged();
    partial void OnActorIDChanging(int value);
    partial void OnActorIDChanged();
    partial void OnPapelChanging(string value);
    partial void OnPapelChanged();
    #endregion
		
		public ActoresPelicula()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ActorPeliculaID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ActorPeliculaID
		{
			get
			{
				return this._ActorPeliculaID;
			}
			set
			{
				if ((this._ActorPeliculaID != value))
				{
					this.OnActorPeliculaIDChanging(value);
					this.SendPropertyChanging();
					this._ActorPeliculaID = value;
					this.SendPropertyChanged("ActorPeliculaID");
					this.OnActorPeliculaIDChanged();
				}
			}
		}
		
		[Column(Storage="_PeliculaID", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int PeliculaID
		{
			get
			{
				return this._PeliculaID;
			}
			set
			{
				if ((this._PeliculaID != value))
				{
					if (this._Pelicula.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPeliculaIDChanging(value);
					this.SendPropertyChanging();
					this._PeliculaID = value;
					this.SendPropertyChanged("PeliculaID");
					this.OnPeliculaIDChanged();
				}
			}
		}
		
		[Column(Storage="_ActorID", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int ActorID
		{
			get
			{
				return this._ActorID;
			}
			set
			{
				if ((this._ActorID != value))
				{
					if (this._Actor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActorIDChanging(value);
					this.SendPropertyChanging();
					this._ActorID = value;
					this.SendPropertyChanged("ActorID");
					this.OnActorIDChanged();
				}
			}
		}
		
		[Column(Storage="_Papel", DbType="NVarChar(150)")]
		[DataMember(Order=4)]
		public string Papel
		{
			get
			{
				return this._Papel;
			}
			set
			{
				if ((this._Papel != value))
				{
					this.OnPapelChanging(value);
					this.SendPropertyChanging();
					this._Papel = value;
					this.SendPropertyChanged("Papel");
					this.OnPapelChanged();
				}
			}
		}
		
		[Association(Name="Actor_ActoresPelicula", Storage="_Actor", ThisKey="ActorID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Actor Actor
		{
			get
			{
				return this._Actor.Entity;
			}
			set
			{
				Actor previousValue = this._Actor.Entity;
				if (((previousValue != value) 
							|| (this._Actor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Actor.Entity = null;
						previousValue.ActoresPeliculas.Remove(this);
					}
					this._Actor.Entity = value;
					if ((value != null))
					{
						value.ActoresPeliculas.Add(this);
						this._ActorID = value.ActorID;
					}
					else
					{
						this._ActorID = default(int);
					}
					this.SendPropertyChanged("Actor");
				}
			}
		}
		
		[Association(Name="Pelicula_ActoresPelicula", Storage="_Pelicula", ThisKey="PeliculaID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Pelicula Pelicula
		{
			get
			{
				return this._Pelicula.Entity;
			}
			set
			{
				Pelicula previousValue = this._Pelicula.Entity;
				if (((previousValue != value) 
							|| (this._Pelicula.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pelicula.Entity = null;
						previousValue.ActoresPeliculas.Remove(this);
					}
					this._Pelicula.Entity = value;
					if ((value != null))
					{
						value.ActoresPeliculas.Add(this);
						this._PeliculaID = value.PeliculaID;
					}
					else
					{
						this._PeliculaID = default(int);
					}
					this.SendPropertyChanged("Pelicula");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Actor = default(EntityRef<Actor>);
			this._Pelicula = default(EntityRef<Pelicula>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.Alquileres")]
	[DataContract()]
	public partial class Alquiler : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AlquilerID;
		
		private int _SocioID;
		
		private int _PeliculaID;
		
		private System.DateTime _FechaAlquiler;
		
		private System.Nullable<System.DateTime> _FechaRecogida;
		
		private EntityRef<Pelicula> _Pelicula;
		
		private EntityRef<Usuario> _Usuario;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlquilerIDChanging(int value);
    partial void OnAlquilerIDChanged();
    partial void OnSocioIDChanging(int value);
    partial void OnSocioIDChanged();
    partial void OnPeliculaIDChanging(int value);
    partial void OnPeliculaIDChanged();
    partial void OnFechaAlquilerChanging(System.DateTime value);
    partial void OnFechaAlquilerChanged();
    partial void OnFechaRecogidaChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaRecogidaChanged();
    #endregion
		
		public Alquiler()
		{
			this.Initialize();
		}
		
		[Column(Storage="_AlquilerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int AlquilerID
		{
			get
			{
				return this._AlquilerID;
			}
			set
			{
				if ((this._AlquilerID != value))
				{
					this.OnAlquilerIDChanging(value);
					this.SendPropertyChanging();
					this._AlquilerID = value;
					this.SendPropertyChanged("AlquilerID");
					this.OnAlquilerIDChanged();
				}
			}
		}
		
		[Column(Storage="_SocioID", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int SocioID
		{
			get
			{
				return this._SocioID;
			}
			set
			{
				if ((this._SocioID != value))
				{
					if (this._Usuario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSocioIDChanging(value);
					this.SendPropertyChanging();
					this._SocioID = value;
					this.SendPropertyChanged("SocioID");
					this.OnSocioIDChanged();
				}
			}
		}
		
		[Column(Storage="_PeliculaID", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int PeliculaID
		{
			get
			{
				return this._PeliculaID;
			}
			set
			{
				if ((this._PeliculaID != value))
				{
					if (this._Pelicula.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPeliculaIDChanging(value);
					this.SendPropertyChanging();
					this._PeliculaID = value;
					this.SendPropertyChanged("PeliculaID");
					this.OnPeliculaIDChanged();
				}
			}
		}
		
		[Column(Storage="_FechaAlquiler", DbType="DateTime NOT NULL")]
		[DataMember(Order=4)]
		public System.DateTime FechaAlquiler
		{
			get
			{
				return this._FechaAlquiler;
			}
			set
			{
				if ((this._FechaAlquiler != value))
				{
					this.OnFechaAlquilerChanging(value);
					this.SendPropertyChanging();
					this._FechaAlquiler = value;
					this.SendPropertyChanged("FechaAlquiler");
					this.OnFechaAlquilerChanged();
				}
			}
		}
		
		[Column(Storage="_FechaRecogida", DbType="DateTime")]
		[DataMember(Order=5)]
		public System.Nullable<System.DateTime> FechaRecogida
		{
			get
			{
				return this._FechaRecogida;
			}
			set
			{
				if ((this._FechaRecogida != value))
				{
					this.OnFechaRecogidaChanging(value);
					this.SendPropertyChanging();
					this._FechaRecogida = value;
					this.SendPropertyChanged("FechaRecogida");
					this.OnFechaRecogidaChanged();
				}
			}
		}
		
		[Association(Name="Pelicula_Alquiler", Storage="_Pelicula", ThisKey="PeliculaID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Pelicula Pelicula
		{
			get
			{
				return this._Pelicula.Entity;
			}
			set
			{
				Pelicula previousValue = this._Pelicula.Entity;
				if (((previousValue != value) 
							|| (this._Pelicula.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pelicula.Entity = null;
						previousValue.Alquileres.Remove(this);
					}
					this._Pelicula.Entity = value;
					if ((value != null))
					{
						value.Alquileres.Add(this);
						this._PeliculaID = value.PeliculaID;
					}
					else
					{
						this._PeliculaID = default(int);
					}
					this.SendPropertyChanged("Pelicula");
				}
			}
		}
		
		[Association(Name="Usuario_Alquiler", Storage="_Usuario", ThisKey="SocioID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Usuario Usuario
		{
			get
			{
				return this._Usuario.Entity;
			}
			set
			{
				Usuario previousValue = this._Usuario.Entity;
				if (((previousValue != value) 
							|| (this._Usuario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usuario.Entity = null;
						previousValue.Alquileres.Remove(this);
					}
					this._Usuario.Entity = value;
					if ((value != null))
					{
						value.Alquileres.Add(this);
						this._SocioID = value.UsuarioID;
					}
					else
					{
						this._SocioID = default(int);
					}
					this.SendPropertyChanged("Usuario");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Pelicula = default(EntityRef<Pelicula>);
			this._Usuario = default(EntityRef<Usuario>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.Notificaciones")]
	[DataContract()]
	public partial class Notificacion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NotificacionID;
		
		private int _PeliculaID;
		
		private int _SocioID;
		
		private TipoNotificacion _TipoNotificacion;
		
		private System.DateTime _FechaAlta;
		
		private string _Direccion;
		
		private EntityRef<Pelicula> _Pelicula;
		
		private EntityRef<Usuario> _Usuario;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNotificacionIDChanging(int value);
    partial void OnNotificacionIDChanged();
    partial void OnPeliculaIDChanging(int value);
    partial void OnPeliculaIDChanged();
    partial void OnSocioIDChanging(int value);
    partial void OnSocioIDChanged();
    partial void OnTipoNotificacionChanging(TipoNotificacion value);
    partial void OnTipoNotificacionChanged();
    partial void OnFechaAltaChanging(System.DateTime value);
    partial void OnFechaAltaChanged();
    partial void OnDireccionChanging(string value);
    partial void OnDireccionChanged();
    #endregion
		
		public Notificacion()
		{
			this.Initialize();
		}
		
		[Column(Storage="_NotificacionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int NotificacionID
		{
			get
			{
				return this._NotificacionID;
			}
			set
			{
				if ((this._NotificacionID != value))
				{
					this.OnNotificacionIDChanging(value);
					this.SendPropertyChanging();
					this._NotificacionID = value;
					this.SendPropertyChanged("NotificacionID");
					this.OnNotificacionIDChanged();
				}
			}
		}
		
		[Column(Storage="_PeliculaID", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int PeliculaID
		{
			get
			{
				return this._PeliculaID;
			}
			set
			{
				if ((this._PeliculaID != value))
				{
					if (this._Pelicula.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPeliculaIDChanging(value);
					this.SendPropertyChanging();
					this._PeliculaID = value;
					this.SendPropertyChanged("PeliculaID");
					this.OnPeliculaIDChanged();
				}
			}
		}
		
		[Column(Storage="_SocioID", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int SocioID
		{
			get
			{
				return this._SocioID;
			}
			set
			{
				if ((this._SocioID != value))
				{
					if (this._Usuario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSocioIDChanging(value);
					this.SendPropertyChanging();
					this._SocioID = value;
					this.SendPropertyChanged("SocioID");
					this.OnSocioIDChanged();
				}
			}
		}
		
		[Column(Storage="_TipoNotificacion", DbType="SmallInt NOT NULL", CanBeNull=false)]
		[DataMember(Order=4)]
		public TipoNotificacion TipoNotificacion
		{
			get
			{
				return this._TipoNotificacion;
			}
			set
			{
				if ((this._TipoNotificacion != value))
				{
					this.OnTipoNotificacionChanging(value);
					this.SendPropertyChanging();
					this._TipoNotificacion = value;
					this.SendPropertyChanged("TipoNotificacion");
					this.OnTipoNotificacionChanged();
				}
			}
		}
		
		[Column(Storage="_FechaAlta", DbType="DateTime NOT NULL")]
		[DataMember(Order=5)]
		public System.DateTime FechaAlta
		{
			get
			{
				return this._FechaAlta;
			}
			set
			{
				if ((this._FechaAlta != value))
				{
					this.OnFechaAltaChanging(value);
					this.SendPropertyChanging();
					this._FechaAlta = value;
					this.SendPropertyChanged("FechaAlta");
					this.OnFechaAltaChanged();
				}
			}
		}
		
		[Column(Storage="_Direccion", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		[DataMember(Order=6)]
		public string Direccion
		{
			get
			{
				return this._Direccion;
			}
			set
			{
				if ((this._Direccion != value))
				{
					this.OnDireccionChanging(value);
					this.SendPropertyChanging();
					this._Direccion = value;
					this.SendPropertyChanged("Direccion");
					this.OnDireccionChanged();
				}
			}
		}
		
		[Association(Name="Pelicula_Notificacion", Storage="_Pelicula", ThisKey="PeliculaID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Pelicula Pelicula
		{
			get
			{
				return this._Pelicula.Entity;
			}
			set
			{
				Pelicula previousValue = this._Pelicula.Entity;
				if (((previousValue != value) 
							|| (this._Pelicula.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pelicula.Entity = null;
						previousValue.Notificaciones.Remove(this);
					}
					this._Pelicula.Entity = value;
					if ((value != null))
					{
						value.Notificaciones.Add(this);
						this._PeliculaID = value.PeliculaID;
					}
					else
					{
						this._PeliculaID = default(int);
					}
					this.SendPropertyChanged("Pelicula");
				}
			}
		}
		
		[Association(Name="Usuario_Notificacion", Storage="_Usuario", ThisKey="SocioID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Usuario Usuario
		{
			get
			{
				return this._Usuario.Entity;
			}
			set
			{
				Usuario previousValue = this._Usuario.Entity;
				if (((previousValue != value) 
							|| (this._Usuario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usuario.Entity = null;
						previousValue.Notificaciones.Remove(this);
					}
					this._Usuario.Entity = value;
					if ((value != null))
					{
						value.Notificaciones.Add(this);
						this._SocioID = value.UsuarioID;
					}
					else
					{
						this._SocioID = default(int);
					}
					this.SendPropertyChanged("Usuario");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Pelicula = default(EntityRef<Pelicula>);
			this._Usuario = default(EntityRef<Usuario>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.Peliculas")]
	[DataContract()]
	public partial class Pelicula : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PeliculaID;
		
		private string _CodBarras;
		
		private string _Titulo;
		
		private string _Sinopsis;
		
		private int _Duracion;
		
		private bool _Novedad;
		
		private Clasificaciones _Clasificacion;
		
		private Generos _Genero;
		
		private string _URLTrailer;
		
		private int _UnidadesVenta;
		
		private int _UnidadesAlquiler;
		
		private int _UnidadesVentaAlquiler;
		
		private int _UnidadesAlquiladas;
		
		private EntitySet<ActoresPelicula> _ActoresPeliculas;
		
		private EntitySet<Alquiler> _Alquilers;
		
		private EntitySet<Notificacion> _Notificaciones;
		
		private EntitySet<Historico> _Historicos;
		
		private EntitySet<Puntuacion> _Puntuaciones;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPeliculaIDChanging(int value);
    partial void OnPeliculaIDChanged();
    partial void OnCodBarrasChanging(string value);
    partial void OnCodBarrasChanged();
    partial void OnTituloChanging(string value);
    partial void OnTituloChanged();
    partial void OnSinopsisChanging(string value);
    partial void OnSinopsisChanged();
    partial void OnDuracionChanging(int value);
    partial void OnDuracionChanged();
    partial void OnNovedadChanging(bool value);
    partial void OnNovedadChanged();
    partial void OnClasificacionChanging(Clasificaciones value);
    partial void OnClasificacionChanged();
    partial void OnGeneroChanging(Generos value);
    partial void OnGeneroChanged();
    partial void OnURLTrailerChanging(string value);
    partial void OnURLTrailerChanged();
    partial void OnUnidadesVentaChanging(int value);
    partial void OnUnidadesVentaChanged();
    partial void OnUnidadesAlquilerChanging(int value);
    partial void OnUnidadesAlquilerChanged();
    partial void OnUnidadesVentaAlquilerChanging(int value);
    partial void OnUnidadesVentaAlquilerChanged();
    partial void OnUnidadesAlquiladasChanging(int value);
    partial void OnUnidadesAlquiladasChanged();
    #endregion
		
		public Pelicula()
		{
			this.Initialize();
		}
		
		[Column(Storage="_PeliculaID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int PeliculaID
		{
			get
			{
				return this._PeliculaID;
			}
			set
			{
				if ((this._PeliculaID != value))
				{
					this.OnPeliculaIDChanging(value);
					this.SendPropertyChanging();
					this._PeliculaID = value;
					this.SendPropertyChanged("PeliculaID");
					this.OnPeliculaIDChanged();
				}
			}
		}
		
		[Column(Storage="_CodBarras", DbType="NChar(13) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string CodBarras
		{
			get
			{
				return this._CodBarras;
			}
			set
			{
				if ((this._CodBarras != value))
				{
					this.OnCodBarrasChanging(value);
					this.SendPropertyChanging();
					this._CodBarras = value;
					this.SendPropertyChanged("CodBarras");
					this.OnCodBarrasChanged();
				}
			}
		}
		
		[Column(Storage="_Titulo", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string Titulo
		{
			get
			{
				return this._Titulo;
			}
			set
			{
				if ((this._Titulo != value))
				{
					this.OnTituloChanging(value);
					this.SendPropertyChanging();
					this._Titulo = value;
					this.SendPropertyChanged("Titulo");
					this.OnTituloChanged();
				}
			}
		}
		
		[Column(Storage="_Sinopsis", DbType="NVarChar(2000) NOT NULL", CanBeNull=false)]
		[DataMember(Order=4)]
		public string Sinopsis
		{
			get
			{
				return this._Sinopsis;
			}
			set
			{
				if ((this._Sinopsis != value))
				{
					this.OnSinopsisChanging(value);
					this.SendPropertyChanging();
					this._Sinopsis = value;
					this.SendPropertyChanged("Sinopsis");
					this.OnSinopsisChanged();
				}
			}
		}
		
		[Column(Storage="_Duracion", DbType="Int NOT NULL")]
		[DataMember(Order=5)]
		public int Duracion
		{
			get
			{
				return this._Duracion;
			}
			set
			{
				if ((this._Duracion != value))
				{
					this.OnDuracionChanging(value);
					this.SendPropertyChanging();
					this._Duracion = value;
					this.SendPropertyChanged("Duracion");
					this.OnDuracionChanged();
				}
			}
		}
		
		[Column(Storage="_Novedad", DbType="Bit NOT NULL")]
		[DataMember(Order=6)]
		public bool Novedad
		{
			get
			{
				return this._Novedad;
			}
			set
			{
				if ((this._Novedad != value))
				{
					this.OnNovedadChanging(value);
					this.SendPropertyChanging();
					this._Novedad = value;
					this.SendPropertyChanged("Novedad");
					this.OnNovedadChanged();
				}
			}
		}
		
		[Column(Storage="_Clasificacion", DbType="SmallInt NOT NULL", CanBeNull=false)]
		[DataMember(Order=7)]
		public Clasificaciones Clasificacion
		{
			get
			{
				return this._Clasificacion;
			}
			set
			{
				if ((this._Clasificacion != value))
				{
					this.OnClasificacionChanging(value);
					this.SendPropertyChanging();
					this._Clasificacion = value;
					this.SendPropertyChanged("Clasificacion");
					this.OnClasificacionChanged();
				}
			}
		}
		
		[Column(Storage="_Genero", DbType="SmallInt NOT NULL", CanBeNull=false)]
		[DataMember(Order=8)]
		public Generos Genero
		{
			get
			{
				return this._Genero;
			}
			set
			{
				if ((this._Genero != value))
				{
					this.OnGeneroChanging(value);
					this.SendPropertyChanging();
					this._Genero = value;
					this.SendPropertyChanged("Genero");
					this.OnGeneroChanged();
				}
			}
		}
		
		[Column(Storage="_URLTrailer", DbType="NVarChar(150)")]
		[DataMember(Order=9)]
		public string URLTrailer
		{
			get
			{
				return this._URLTrailer;
			}
			set
			{
				if ((this._URLTrailer != value))
				{
					this.OnURLTrailerChanging(value);
					this.SendPropertyChanging();
					this._URLTrailer = value;
					this.SendPropertyChanged("URLTrailer");
					this.OnURLTrailerChanged();
				}
			}
		}
		
		[Column(Storage="_UnidadesVenta", DbType="Int NOT NULL")]
		[DataMember(Order=10)]
		public int UnidadesVenta
		{
			get
			{
				return this._UnidadesVenta;
			}
			set
			{
				if ((this._UnidadesVenta != value))
				{
					this.OnUnidadesVentaChanging(value);
					this.SendPropertyChanging();
					this._UnidadesVenta = value;
					this.SendPropertyChanged("UnidadesVenta");
					this.OnUnidadesVentaChanged();
				}
			}
		}
		
		[Column(Storage="_UnidadesAlquiler", DbType="Int NOT NULL")]
		[DataMember(Order=11)]
		public int UnidadesAlquiler
		{
			get
			{
				return this._UnidadesAlquiler;
			}
			set
			{
				if ((this._UnidadesAlquiler != value))
				{
					this.OnUnidadesAlquilerChanging(value);
					this.SendPropertyChanging();
					this._UnidadesAlquiler = value;
					this.SendPropertyChanged("UnidadesAlquiler");
					this.OnUnidadesAlquilerChanged();
				}
			}
		}
		
		[Column(Storage="_UnidadesVentaAlquiler", DbType="Int NOT NULL")]
		[DataMember(Order=12)]
		public int UnidadesVentaAlquiler
		{
			get
			{
				return this._UnidadesVentaAlquiler;
			}
			set
			{
				if ((this._UnidadesVentaAlquiler != value))
				{
					this.OnUnidadesVentaAlquilerChanging(value);
					this.SendPropertyChanging();
					this._UnidadesVentaAlquiler = value;
					this.SendPropertyChanged("UnidadesVentaAlquiler");
					this.OnUnidadesVentaAlquilerChanged();
				}
			}
		}
		
		[Column(Storage="_UnidadesAlquiladas", DbType="Int NOT NULL")]
		[DataMember(Order=13)]
		public int UnidadesAlquiladas
		{
			get
			{
				return this._UnidadesAlquiladas;
			}
			set
			{
				if ((this._UnidadesAlquiladas != value))
				{
					this.OnUnidadesAlquiladasChanging(value);
					this.SendPropertyChanging();
					this._UnidadesAlquiladas = value;
					this.SendPropertyChanged("UnidadesAlquiladas");
					this.OnUnidadesAlquiladasChanged();
				}
			}
		}
		
		[Association(Name="Pelicula_ActoresPelicula", Storage="_ActoresPeliculas", OtherKey="PeliculaID")]
		[DataMember(Order=14, EmitDefaultValue=false)]
		public EntitySet<ActoresPelicula> ActoresPeliculas
		{
			get
			{
				if ((this.serializing 
							&& (this._ActoresPeliculas.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ActoresPeliculas;
			}
			set
			{
				this._ActoresPeliculas.Assign(value);
			}
		}
		
		[Association(Name="Pelicula_Alquiler", Storage="_Alquilers", OtherKey="PeliculaID")]
		[DataMember(Order=15, EmitDefaultValue=false)]
		public EntitySet<Alquiler> Alquileres
		{
			get
			{
				if ((this.serializing 
							&& (this._Alquilers.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Alquilers;
			}
			set
			{
				this._Alquilers.Assign(value);
			}
		}
		
		[Association(Name="Pelicula_Notificacion", Storage="_Notificaciones", OtherKey="PeliculaID")]
		[DataMember(Order=16, EmitDefaultValue=false)]
		public EntitySet<Notificacion> Notificaciones
		{
			get
			{
				if ((this.serializing 
							&& (this._Notificaciones.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Notificaciones;
			}
			set
			{
				this._Notificaciones.Assign(value);
			}
		}
		
		[Association(Name="Pelicula_Historico", Storage="_Historicos", OtherKey="PeliculaID")]
		[DataMember(Order=17, EmitDefaultValue=false)]
		public EntitySet<Historico> Historicos
		{
			get
			{
				if ((this.serializing 
							&& (this._Historicos.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Historicos;
			}
			set
			{
				this._Historicos.Assign(value);
			}
		}
		
		[Association(Name="Pelicula_Puntuacion", Storage="_Puntuaciones", OtherKey="PeliculaID")]
		[DataMember(Order=18, EmitDefaultValue=false)]
		public EntitySet<Puntuacion> Puntuaciones
		{
			get
			{
				if ((this.serializing 
							&& (this._Puntuaciones.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Puntuaciones;
			}
			set
			{
				this._Puntuaciones.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActoresPeliculas(ActoresPelicula entity)
		{
			this.SendPropertyChanging();
			entity.Pelicula = this;
		}
		
		private void detach_ActoresPeliculas(ActoresPelicula entity)
		{
			this.SendPropertyChanging();
			entity.Pelicula = null;
		}
		
		private void attach_Alquilers(Alquiler entity)
		{
			this.SendPropertyChanging();
			entity.Pelicula = this;
		}
		
		private void detach_Alquilers(Alquiler entity)
		{
			this.SendPropertyChanging();
			entity.Pelicula = null;
		}
		
		private void attach_Notificaciones(Notificacion entity)
		{
			this.SendPropertyChanging();
			entity.Pelicula = this;
		}
		
		private void detach_Notificaciones(Notificacion entity)
		{
			this.SendPropertyChanging();
			entity.Pelicula = null;
		}
		
		private void attach_Historicos(Historico entity)
		{
			this.SendPropertyChanging();
			entity.Pelicula = this;
		}
		
		private void detach_Historicos(Historico entity)
		{
			this.SendPropertyChanging();
			entity.Pelicula = null;
		}
		
		private void attach_Puntuaciones(Puntuacion entity)
		{
			this.SendPropertyChanging();
			entity.Pelicula = this;
		}
		
		private void detach_Puntuaciones(Puntuacion entity)
		{
			this.SendPropertyChanging();
			entity.Pelicula = null;
		}
		
		private void Initialize()
		{
			this._ActoresPeliculas = new EntitySet<ActoresPelicula>(new Action<ActoresPelicula>(this.attach_ActoresPeliculas), new Action<ActoresPelicula>(this.detach_ActoresPeliculas));
			this._Alquilers = new EntitySet<Alquiler>(new Action<Alquiler>(this.attach_Alquilers), new Action<Alquiler>(this.detach_Alquilers));
			this._Notificaciones = new EntitySet<Notificacion>(new Action<Notificacion>(this.attach_Notificaciones), new Action<Notificacion>(this.detach_Notificaciones));
			this._Historicos = new EntitySet<Historico>(new Action<Historico>(this.attach_Historicos), new Action<Historico>(this.detach_Historicos));
			this._Puntuaciones = new EntitySet<Puntuacion>(new Action<Puntuacion>(this.attach_Puntuaciones), new Action<Puntuacion>(this.detach_Puntuaciones));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Usuarios")]
	[DataContract()]
	[InheritanceMapping(Code="2", Type=typeof(Usuario), IsDefault=true)]
	[InheritanceMapping(Code="1", Type=typeof(Admin))]
	[InheritanceMapping(Code="0", Type=typeof(Socio))]
	public partial class Usuario : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UsuarioID;
		
		private string _NIF;
		
		private Rol _Rol;
		
		private EntitySet<Alquiler> _Alquileres;
		
		private EntitySet<Notificacion> _Notificaciones;
		
		private EntitySet<Puntuacion> _Puntuaciones;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsuarioIDChanging(int value);
    partial void OnUsuarioIDChanged();
    partial void OnNIFChanging(string value);
    partial void OnNIFChanged();
    partial void OnRolChanging(Rol value);
    partial void OnRolChanged();
    #endregion
		
		public Usuario()
		{
			this.Initialize();
		}
		
		[Column(Storage="_UsuarioID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int UsuarioID
		{
			get
			{
				return this._UsuarioID;
			}
			set
			{
				if ((this._UsuarioID != value))
				{
					this.OnUsuarioIDChanging(value);
					this.SendPropertyChanging();
					this._UsuarioID = value;
					this.SendPropertyChanged("UsuarioID");
					this.OnUsuarioIDChanged();
				}
			}
		}
		
		[Column(Storage="_NIF", DbType="NChar(9) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string NIF
		{
			get
			{
				return this._NIF;
			}
			set
			{
				if ((this._NIF != value))
				{
					this.OnNIFChanging(value);
					this.SendPropertyChanging();
					this._NIF = value;
					this.SendPropertyChanged("NIF");
					this.OnNIFChanged();
				}
			}
		}
		
		[Column(Storage="_Rol", DbType="SmallInt NOT NULL", CanBeNull=false, IsDiscriminator=true)]
		[DataMember(Order=3)]
		public Rol Rol
		{
			get
			{
				return this._Rol;
			}
			set
			{
				if ((this._Rol != value))
				{
					this.OnRolChanging(value);
					this.SendPropertyChanging();
					this._Rol = value;
					this.SendPropertyChanged("Rol");
					this.OnRolChanged();
				}
			}
		}
		
		[Association(Name="Usuario_Alquiler", Storage="_Alquileres", OtherKey="SocioID")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<Alquiler> Alquileres
		{
			get
			{
				if ((this.serializing 
							&& (this._Alquileres.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Alquileres;
			}
			set
			{
				this._Alquileres.Assign(value);
			}
		}
		
		[Association(Name="Usuario_Notificacion", Storage="_Notificaciones", OtherKey="SocioID")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<Notificacion> Notificaciones
		{
			get
			{
				if ((this.serializing 
							&& (this._Notificaciones.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Notificaciones;
			}
			set
			{
				this._Notificaciones.Assign(value);
			}
		}
		
		[Association(Name="Usuario_Puntuacion", Storage="_Puntuaciones", OtherKey="SocioID")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<Puntuacion> Puntuaciones
		{
			get
			{
				if ((this.serializing 
							&& (this._Puntuaciones.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Puntuaciones;
			}
			set
			{
				this._Puntuaciones.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Alquileres(Alquiler entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = this;
		}
		
		private void detach_Alquileres(Alquiler entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = null;
		}
		
		private void attach_Notificaciones(Notificacion entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = this;
		}
		
		private void detach_Notificaciones(Notificacion entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = null;
		}
		
		private void attach_Puntuaciones(Puntuacion entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = this;
		}
		
		private void detach_Puntuaciones(Puntuacion entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = null;
		}
		
		private void Initialize()
		{
			this._Alquileres = new EntitySet<Alquiler>(new Action<Alquiler>(this.attach_Alquileres), new Action<Alquiler>(this.detach_Alquileres));
			this._Notificaciones = new EntitySet<Notificacion>(new Action<Notificacion>(this.attach_Notificaciones), new Action<Notificacion>(this.detach_Notificaciones));
			this._Puntuaciones = new EntitySet<Puntuacion>(new Action<Puntuacion>(this.attach_Puntuaciones), new Action<Puntuacion>(this.detach_Puntuaciones));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[DataContract()]
	public partial class Admin : Usuario
	{
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    #endregion
		
		public Admin()
		{
			this.Initialize();
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public new void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[DataContract()]
	public partial class Socio : Usuario
	{
		
		private string _Nombre;
		
		private string _Telefono;
		
		private string _Email;
		
		private string _Direccion;
		
		private string _Ciudad;
		
		private string _Provincia;
		
		private System.Nullable<decimal> _CodigoPostal;
		
		private System.Nullable<decimal> _Saldo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnTelefonoChanging(string value);
    partial void OnTelefonoChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnDireccionChanging(string value);
    partial void OnDireccionChanged();
    partial void OnCiudadChanging(string value);
    partial void OnCiudadChanged();
    partial void OnProvinciaChanging(string value);
    partial void OnProvinciaChanged();
    partial void OnCodigoPostalChanging(System.Nullable<decimal> value);
    partial void OnCodigoPostalChanged();
    partial void OnSaldoChanging(System.Nullable<decimal> value);
    partial void OnSaldoChanged();
    #endregion
		
		public Socio()
		{
			this.Initialize();
		}
		
		[Column(Storage="_Nombre", DbType="NVarChar(50)")]
		[DataMember(Order=1)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Column(Storage="_Telefono", DbType="NVarChar(50)")]
		[DataMember(Order=2)]
		public string Telefono
		{
			get
			{
				return this._Telefono;
			}
			set
			{
				if ((this._Telefono != value))
				{
					this.OnTelefonoChanging(value);
					this.SendPropertyChanging();
					this._Telefono = value;
					this.SendPropertyChanged("Telefono");
					this.OnTelefonoChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50)")]
		[DataMember(Order=3)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Direccion", DbType="NVarChar(50)")]
		[DataMember(Order=4)]
		public string Direccion
		{
			get
			{
				return this._Direccion;
			}
			set
			{
				if ((this._Direccion != value))
				{
					this.OnDireccionChanging(value);
					this.SendPropertyChanging();
					this._Direccion = value;
					this.SendPropertyChanged("Direccion");
					this.OnDireccionChanged();
				}
			}
		}
		
		[Column(Storage="_Ciudad", DbType="NVarChar(50)")]
		[DataMember(Order=5)]
		public string Ciudad
		{
			get
			{
				return this._Ciudad;
			}
			set
			{
				if ((this._Ciudad != value))
				{
					this.OnCiudadChanging(value);
					this.SendPropertyChanging();
					this._Ciudad = value;
					this.SendPropertyChanged("Ciudad");
					this.OnCiudadChanged();
				}
			}
		}
		
		[Column(Storage="_Provincia", DbType="NVarChar(50)")]
		[DataMember(Order=6)]
		public string Provincia
		{
			get
			{
				return this._Provincia;
			}
			set
			{
				if ((this._Provincia != value))
				{
					this.OnProvinciaChanging(value);
					this.SendPropertyChanging();
					this._Provincia = value;
					this.SendPropertyChanged("Provincia");
					this.OnProvinciaChanged();
				}
			}
		}
		
		[Column(Storage="_CodigoPostal", DbType="Decimal(5,0)")]
		[DataMember(Order=7)]
		public System.Nullable<decimal> CodigoPostal
		{
			get
			{
				return this._CodigoPostal;
			}
			set
			{
				if ((this._CodigoPostal != value))
				{
					this.OnCodigoPostalChanging(value);
					this.SendPropertyChanging();
					this._CodigoPostal = value;
					this.SendPropertyChanged("CodigoPostal");
					this.OnCodigoPostalChanged();
				}
			}
		}
		
		[Column(Storage="_Saldo", DbType="Decimal(18,0)")]
		[DataMember(Order=8)]
		public System.Nullable<decimal> Saldo
		{
			get
			{
				return this._Saldo;
			}
			set
			{
				if ((this._Saldo != value))
				{
					this.OnSaldoChanging(value);
					this.SendPropertyChanging();
					this._Saldo = value;
					this.SendPropertyChanged("Saldo");
					this.OnSaldoChanged();
				}
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public new void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.Historico")]
	[DataContract()]
	public partial class Historico : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HistoricoID;
		
		private System.Nullable<int> _SocioID;
		
		private System.Nullable<int> _PeliculaID;
		
		private System.DateTime _Fecha;
		
		private System.Nullable<System.DateTime> _FechaRecogida;
		
		private System.Nullable<System.DateTime> _FechaDevolucion;
		
		private System.Nullable<decimal> _Precio;
		
		private TipoOperacion _TipoOperacion;
		
		private EntityRef<Pelicula> _Pelicula;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHistoricoIDChanging(int value);
    partial void OnHistoricoIDChanged();
    partial void OnSocioIDChanging(System.Nullable<int> value);
    partial void OnSocioIDChanged();
    partial void OnPeliculaIDChanging(System.Nullable<int> value);
    partial void OnPeliculaIDChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    partial void OnFechaRecogidaChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaRecogidaChanged();
    partial void OnFechaDevolucionChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaDevolucionChanged();
    partial void OnPrecioChanging(System.Nullable<decimal> value);
    partial void OnPrecioChanged();
    partial void OnTipoOperacionChanging(TipoOperacion value);
    partial void OnTipoOperacionChanged();
    #endregion
		
		public Historico()
		{
			this.Initialize();
		}
		
		[Column(Storage="_HistoricoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int HistoricoID
		{
			get
			{
				return this._HistoricoID;
			}
			set
			{
				if ((this._HistoricoID != value))
				{
					this.OnHistoricoIDChanging(value);
					this.SendPropertyChanging();
					this._HistoricoID = value;
					this.SendPropertyChanged("HistoricoID");
					this.OnHistoricoIDChanged();
				}
			}
		}
		
		[Column(Storage="_SocioID", DbType="Int")]
		[DataMember(Order=2)]
		public System.Nullable<int> SocioID
		{
			get
			{
				return this._SocioID;
			}
			set
			{
				if ((this._SocioID != value))
				{
					this.OnSocioIDChanging(value);
					this.SendPropertyChanging();
					this._SocioID = value;
					this.SendPropertyChanged("SocioID");
					this.OnSocioIDChanged();
				}
			}
		}
		
		[Column(Storage="_PeliculaID", DbType="Int")]
		[DataMember(Order=3)]
		public System.Nullable<int> PeliculaID
		{
			get
			{
				return this._PeliculaID;
			}
			set
			{
				if ((this._PeliculaID != value))
				{
					if (this._Pelicula.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPeliculaIDChanging(value);
					this.SendPropertyChanging();
					this._PeliculaID = value;
					this.SendPropertyChanged("PeliculaID");
					this.OnPeliculaIDChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		[DataMember(Order=4)]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Column(Storage="_FechaRecogida", DbType="DateTime")]
		[DataMember(Order=5)]
		public System.Nullable<System.DateTime> FechaRecogida
		{
			get
			{
				return this._FechaRecogida;
			}
			set
			{
				if ((this._FechaRecogida != value))
				{
					this.OnFechaRecogidaChanging(value);
					this.SendPropertyChanging();
					this._FechaRecogida = value;
					this.SendPropertyChanged("FechaRecogida");
					this.OnFechaRecogidaChanged();
				}
			}
		}
		
		[Column(Storage="_FechaDevolucion", DbType="DateTime")]
		[DataMember(Order=6)]
		public System.Nullable<System.DateTime> FechaDevolucion
		{
			get
			{
				return this._FechaDevolucion;
			}
			set
			{
				if ((this._FechaDevolucion != value))
				{
					this.OnFechaDevolucionChanging(value);
					this.SendPropertyChanging();
					this._FechaDevolucion = value;
					this.SendPropertyChanged("FechaDevolucion");
					this.OnFechaDevolucionChanged();
				}
			}
		}
		
		[Column(Storage="_Precio", DbType="Decimal(18,0)")]
		[DataMember(Order=7)]
		public System.Nullable<decimal> Precio
		{
			get
			{
				return this._Precio;
			}
			set
			{
				if ((this._Precio != value))
				{
					this.OnPrecioChanging(value);
					this.SendPropertyChanging();
					this._Precio = value;
					this.SendPropertyChanged("Precio");
					this.OnPrecioChanged();
				}
			}
		}
		
		[Column(Storage="_TipoOperacion", DbType="SmallInt NOT NULL", CanBeNull=false)]
		[DataMember(Order=8)]
		public TipoOperacion TipoOperacion
		{
			get
			{
				return this._TipoOperacion;
			}
			set
			{
				if ((this._TipoOperacion != value))
				{
					this.OnTipoOperacionChanging(value);
					this.SendPropertyChanging();
					this._TipoOperacion = value;
					this.SendPropertyChanged("TipoOperacion");
					this.OnTipoOperacionChanged();
				}
			}
		}
		
		[Association(Name="Pelicula_Historico", Storage="_Pelicula", ThisKey="PeliculaID", IsForeignKey=true)]
		public Pelicula Pelicula
		{
			get
			{
				return this._Pelicula.Entity;
			}
			set
			{
				Pelicula previousValue = this._Pelicula.Entity;
				if (((previousValue != value) 
							|| (this._Pelicula.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pelicula.Entity = null;
						previousValue.Historicos.Remove(this);
					}
					this._Pelicula.Entity = value;
					if ((value != null))
					{
						value.Historicos.Add(this);
						this._PeliculaID = value.PeliculaID;
					}
					else
					{
						this._PeliculaID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Pelicula");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Pelicula = default(EntityRef<Pelicula>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.Puntuaciones")]
	[DataContract()]
	public partial class Puntuacion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PuntuacionID;
		
		private int _SocioID;
		
		private int _PeliculaID;
		
		private decimal _ValorPuntuacion;
		
		private EntityRef<Pelicula> _Pelicula;
		
		private EntityRef<Usuario> _Usuario;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPuntuacionIDChanging(int value);
    partial void OnPuntuacionIDChanged();
    partial void OnSocioIDChanging(int value);
    partial void OnSocioIDChanged();
    partial void OnPeliculaIDChanging(int value);
    partial void OnPeliculaIDChanged();
    partial void OnValorPuntuacionChanging(decimal value);
    partial void OnValorPuntuacionChanged();
    #endregion
		
		public Puntuacion()
		{
			this.Initialize();
		}
		
		[Column(Storage="_PuntuacionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int PuntuacionID
		{
			get
			{
				return this._PuntuacionID;
			}
			set
			{
				if ((this._PuntuacionID != value))
				{
					this.OnPuntuacionIDChanging(value);
					this.SendPropertyChanging();
					this._PuntuacionID = value;
					this.SendPropertyChanged("PuntuacionID");
					this.OnPuntuacionIDChanged();
				}
			}
		}
		
		[Column(Storage="_SocioID", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int SocioID
		{
			get
			{
				return this._SocioID;
			}
			set
			{
				if ((this._SocioID != value))
				{
					if (this._Usuario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSocioIDChanging(value);
					this.SendPropertyChanging();
					this._SocioID = value;
					this.SendPropertyChanged("SocioID");
					this.OnSocioIDChanged();
				}
			}
		}
		
		[Column(Storage="_PeliculaID", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int PeliculaID
		{
			get
			{
				return this._PeliculaID;
			}
			set
			{
				if ((this._PeliculaID != value))
				{
					if (this._Pelicula.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPeliculaIDChanging(value);
					this.SendPropertyChanging();
					this._PeliculaID = value;
					this.SendPropertyChanged("PeliculaID");
					this.OnPeliculaIDChanged();
				}
			}
		}
		
		[Column(Name="Puntuacion", Storage="_ValorPuntuacion", DbType="Decimal(18,0) NOT NULL")]
		[DataMember(Order=4)]
		public decimal ValorPuntuacion
		{
			get
			{
				return this._ValorPuntuacion;
			}
			set
			{
				if ((this._ValorPuntuacion != value))
				{
					this.OnValorPuntuacionChanging(value);
					this.SendPropertyChanging();
					this._ValorPuntuacion = value;
					this.SendPropertyChanged("ValorPuntuacion");
					this.OnValorPuntuacionChanged();
				}
			}
		}
		
		[Association(Name="Pelicula_Puntuacion", Storage="_Pelicula", ThisKey="PeliculaID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Pelicula Pelicula
		{
			get
			{
				return this._Pelicula.Entity;
			}
			set
			{
				Pelicula previousValue = this._Pelicula.Entity;
				if (((previousValue != value) 
							|| (this._Pelicula.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pelicula.Entity = null;
						previousValue.Puntuaciones.Remove(this);
					}
					this._Pelicula.Entity = value;
					if ((value != null))
					{
						value.Puntuaciones.Add(this);
						this._PeliculaID = value.PeliculaID;
					}
					else
					{
						this._PeliculaID = default(int);
					}
					this.SendPropertyChanged("Pelicula");
				}
			}
		}
		
		[Association(Name="Usuario_Puntuacion", Storage="_Usuario", ThisKey="SocioID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Usuario Usuario
		{
			get
			{
				return this._Usuario.Entity;
			}
			set
			{
				Usuario previousValue = this._Usuario.Entity;
				if (((previousValue != value) 
							|| (this._Usuario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usuario.Entity = null;
						previousValue.Puntuaciones.Remove(this);
					}
					this._Usuario.Entity = value;
					if ((value != null))
					{
						value.Puntuaciones.Add(this);
						this._SocioID = value.UsuarioID;
					}
					else
					{
						this._SocioID = default(int);
					}
					this.SendPropertyChanged("Usuario");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Pelicula = default(EntityRef<Pelicula>);
			this._Usuario = default(EntityRef<Usuario>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
}
#pragma warning restore 1591
